function Builder_BusRoute::BuildBusStation(town)
{
	/*Find square as close to town centre as possible*/
	local range = 1;
	local area = AITileList();
	local townLocation = AITown.GetLocation(town);
	while (range < 15) {
		area.AddRectangle(townLocation - AIMap.GetTileIndex(range, range), townLocation + AIMap.GetTileIndex(range, range));
		area.Valuate(AITile.GetOwner);
		area.KeepValue(AICompany.COMPANY_INVALID);
		area.Valuate(AIRoad.IsRoadTile);
		area.KeepValue(0); //don't try to build station on road tile
		area.Valuate(AITile.GetSlope);
		area.KeepValue(AITile.SLOPE_FLAT);//TODO: keep other possible slopes
		if (area.Count()) {
			for (local busStationTile = area.Begin(); !area.IsEnd(); busStationTile = area.Next()) {
				local busStationFront = getRoadTile(busStationTile);
				if (busStationFront) {
					if (!AITile.DemolishTile(busStationTile)) continue;
					if (!AIRoad.BuildRoad(busStationTile, busStationFront)) {
						switch (AIError.GetLastError()) {
							case AIError.ERR_NOT_ENOUGH_CASH: //wait for money
								Warning("Not enough money to build road for bus station. Waiting for more");
								while (AICompany.GetBankBalance(AICompany.COMPANY_SELF) < AIRoad.GetBuildCost(AIRoad.ROADTYPE_ROAD, AIRoad.BT_ROAD)) {					
									if (!AITile.IsBuildable(busStationTile)) continue;
										AIController.Sleep(50);
									}
									if (!AIRoad.BuildRoad(busStationTile, busStationFront)) return null; //TODO: handle errors again
								break;
							case AIError.ERR_VEHICLE_IN_THE_WAY: //wait for stupid vehicle to get out of the way
								Warning("Bus stop building temporarily stopped - vehicle in the way");
								while (!AIRoad.BuildRoad(busStationTile, busStationFront)) {
									if (!AITile.IsBuildable(busStationTile)) continue;
									AIController.Sleep(10);
								}
								break;
							case AIError.ERR_ALREADY_BUILT: //probably too much road, but build bus station anyway TODO: check i'm right
								break;
							case AIRoad.ERR_ROAD_WORKS_IN_PROGRESS: //as above, but give up, as road works will take too long
							case AIError.ERR_LAND_SLOPED_WRONG: //TODO: handle it, give up for now
							case AIError.ERR_AREA_NOT_CLEAR: //as above
							case AIRoad.ERR_ROAD_ONE_WAY_ROADS_CANNOT_HAVE_JUNCTIONS: //can't happen?
							default:
								Warning("Unhandled error while building bus station: " + AIError.GetLastErrorString() + ". Trying again");
								continue;
						}
					}
					if (!AIRoad.BuildRoadStation(busStationTile, busStationFront, AIRoad.ROADVEHTYPE_BUS, AIStation.STATION_JOIN_ADJACENT)) {
						switch (AIError.GetLastError()) {
							case AIError.ERR_NOT_ENOUGH_CASH:
								Warning("Not enough money to build bus station. Waiting for more");
								while (AICompany.GetBankBalance(AICompany.COMPANY_SELF) < AIRoad.GetBuildCost(AIRoad.ROADTYPE_ROAD, AIRoad.BT_BUS_STOP)) {
									if (!AITile.IsBuildable(busStationTile)) continue;
									AIController.Sleep(50);
								}
								if (!AIRoad.BuildRoadStation(busStationTile, busStationFront, AIRoad.ROADVEHTYPE_BUS, AIStation.STATION_JOIN_ADJACENT)) return null; //TODO: handle errors again
							case AIError.ERR_FLAT_LAND_REQUIRED:
							case AIError.ERR_AREA_NOT_CLEAR: //TODO: handle them, give up for now
							default:
								Warning("Unhandled error while building bus station: " + AIError.GetLastErrorString() + ". Trying again");
								continue;
						}
					}
					Info("Bus station successfully built");
					return busStationTile;
				}
			}
			range++; // the found options had no road connections; enlarge search area
		} else {
			range++;
			area.Clear;
		}
	}
	Error("Bus station building in " + AITown.GetName(town) + " failed");
	return null;
}

function Builder_BusRoute::BuildRoadDepot(town)
{
	Info("Building depot in " + AITown.GetName(town));
	local depotList = AIDepotList(AITile.TRANSPORT_ROAD);
	depotList.Valuate(AITile.GetClosestTown);
	depotList.KeepValue(town); //if depot already in town, use that one
	if (!depotList.IsEmpty()) {
		local depot_tile = depotList.Begin();
		return depot_tile;
	} else {
		/*Find empty square as close to station as possible*/
		local range = 1;
		local area = AITileList();
		local townLocation = AITown.GetLocation(town);
	
		while (range < 15) {
			area.AddRectangle(townLocation - AIMap.GetTileIndex(range, range), townLocation + AIMap.GetTileIndex(range, range));
			area.Valuate(AITile.IsBuildable);
			area.KeepValue(1);
			if (area.Count()) {
				for (local depot_tile = area.Begin(); !area.IsEnd(); depot_tile = area.Next()) {
					local depot_front = getRoadTile(depot_tile);
					if (depot_front) {
						if (!AIRoad.BuildRoad(depot_tile, depot_front)) {
							switch (AIError.GetLastError()) {
								case AIError.ERR_NOT_ENOUGH_CASH: //wait for money
									Warning("Not enough money. Waiting for more");
									while (AICompany.GetBankBalance(AICompany.COMPANY_SELF) < AIRoad.GetBuildCost(AIRoad.ROADTYPE_ROAD, AIRoad.BT_ROAD)) {
										if (!AITile.IsBuildable(depot_tile)) continue;
										AIController.Sleep(50);
									}
									if (!AIRoad.BuildRoad(depot_tile, depot_front)) return null; //TODO: handle errors again
									break;
								case AIError.ERR_VEHICLE_IN_THE_WAY: //wait for stupid vehicle to get out of the way
									while (!AIRoad.BuildRoad(depot_tile, depot_front)) {
										if (!AITile.IsBuildable(depot_tile)) continue;
										AIController.Sleep(10);
									}
									break;
								case AIError.ERR_ALREADY_BUILT: //probably too much road, but build depot anyway TODO: check i'm right
								break;
								case AIRoad.ERR_ROAD_WORKS_IN_PROGRESS: //as above
								case AIError.ERR_LAND_SLOPED_WRONG: //TODO: handle it, give up for now
								case AIError.ERR_AREA_NOT_CLEAR: //TODO: handle it, give up for now
								case AIRoad.ERR_ROAD_ONE_WAY_ROADS_CANNOT_HAVE_JUNCTIONS: //can't happen?
								default:
									Warning("Unhandled error while building depot: " + AIError.GetLastErrorString() + ". Trying again");
									continue;
							}
						}
						if (!AIRoad.BuildRoadDepot(depot_tile, depot_front)) {
							switch (AIError.GetLastError()) {
								case AIError.ERR_NOT_ENOUGH_CASH:
									Warning("Not enough money. Waiting for more");
									while (AICompany.GetBankBalance(AICompany.COMPANY_SELF) < AIRoad.GetBuildCost(AIRoad.ROADTYPE_ROAD, AIRoad.BT_DEPOT)) {
										if (!AITile.IsBuildable(depot_tile)) continue;
										AIController.Sleep(50);
									}
									if (!AIRoad.BuildRoadDepot(depot_tile, depot_front)) return null; //TODO: handle errors again
									break;
								case AIError.ERR_FLAT_LAND_REQUIRED:
								case AIError.ERR_AREA_NOT_CLEAR: //TODO: handle them, for now just give up and try somewhere else
								default:
									Warning("Unhandled error while building depot: " + AIError.GetLastErrorString() + ". Trying again");
									continue;
							}
						}
						Info("Depot successfully built");
						return depot_tile;
					}
				}
				range++; // the found options had no road connections; enlarge search area
			} else {
				range++;
				area.Clear;
			}
		}
		Error("Depot building in " + AITown.GetName(town) + " failed");
		return null;
	}
}
